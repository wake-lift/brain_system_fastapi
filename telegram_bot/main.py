import asyncio
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message

from bot.config import settings
from bot.utils import (QUESTION_MAP, check_secrets, generate_answer,
                       get_inline_keyboard, get_parsed_question)

answer_text: None | str = None
current_question_type: None | str = None

dp = Dispatcher()


@dp.message(Command('start'))
async def cmd_start(msg: Message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."""
    await msg.answer(
        (f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{msg.from_user.first_name}</b>!'
         ' –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:'),
        reply_markup=get_inline_keyboard()
    )


@dp.message()
async def react_to_any_message(msg: Message):
    """–û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä—É—á–Ω—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    logging.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–Ω–æ–ø–∫–∏')
    text = ('ü§ñ –ù–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é.'
            '\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏.')
    await msg.reply(text=text)


@dp.callback_query(F.data == 'goto_main')
async def goto_main(callback: CallbackQuery):
    global current_question_type, answer_text
    current_question_type = None
    answer_text = None
    await callback.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:', reply_markup=get_inline_keyboard()
    )


@dp.callback_query(
    F.data.in_({'www', 'brain_ring', 'jeopardy', 'next_question'})
)
async def generate_question(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–π –≤–æ–ø—Ä–æ—Å."""
    global answer_text, current_question_type
    if callback.data == 'next_question' and not current_question_type:
        text = 'ü§ñ –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ - –Ω–µ –±—É–¥–µ—Ç –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ'
        keyboard = get_inline_keyboard([
            [InlineKeyboardButton(
                text='üöÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='goto_main'
            )],
        ])
        callback.message.answer(text, reply_markup=keyboard)
    else:
        parsed_question = (
            await get_parsed_question(current_question_type)
            if current_question_type
            else await get_parsed_question(QUESTION_MAP[callback.data])
        )
        if parsed_question is None:
            keyboard = get_inline_keyboard([
                [InlineKeyboardButton(
                    text='–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='goto_main'
                )],
            ])
            logging.info('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î')
            text = ('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –≤–æ–ø—Ä–æ—Å–æ–≤'
                    ' ü§ñ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.')
            await callback.message.answer(text, reply_markup=keyboard)
        else:
            if callback.data != 'next_question':
                current_question_type = QUESTION_MAP[callback.data]
            answer_text = generate_answer(parsed_question)
            keyboard = get_inline_keyboard([
                [InlineKeyboardButton(
                    text='üëÄ –£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç', callback_data='get_answer'
                )],
                [InlineKeyboardButton(
                    text='üöÄ –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='goto_main'
                )],
            ])
            question = parsed_question['–í–æ–ø—Ä–æ—Å']
            text = f'<i>–í–Ω–∏–º–∞–Ω–∏–µ, –≤–æ–ø—Ä–æ—Å!</i>\n\n{question}'
            await callback.message.answer(text, reply_markup=keyboard)


@dp.callback_query(F.data == 'get_answer')
async def get_answer(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
    global answer_text
    keyboard = get_inline_keyboard([
        [InlineKeyboardButton(
            text='üåç –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', callback_data='next_question'
        )],
        [InlineKeyboardButton(text='üöÄ –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='goto_main')],
    ])
    if answer_text:
        await callback.message.answer(answer_text, reply_markup=keyboard)
        answer_text = None
    else:
        keyboard = get_inline_keyboard([
            [InlineKeyboardButton(
                text='üöÄ –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='goto_main'
            )],
        ])
        logging.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–Ω–æ–ø–∫–∏')
        text = 'ü§ñ –°–ø–µ—Ä–≤–∞ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç'
        await callback.message.answer(text, reply_markup=keyboard)


async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞ –±–æ—Ç–∞."""
    check_secrets()
    bot = Bot(
        token=settings.telegram_token.get_secret_value(),
        default=DefaultBotProperties(
            parse_mode=ParseMode.HTML,
            link_preview_prefer_small_media=True,
        )
    )
    logging.info('–ë–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É')
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
