import sys

import aiosqlite
import asyncpg
from aiogram import types

from bot.config import settings

from . import logger

QUESTION_MAP: dict = {
    'www': '–ß',
    'brain_ring': '–ë',
    'jeopardy': '–Ø',
}


def check_secrets() -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
    –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö."""
    if not all(
        [
            bool(settings.telegram_token),
            (
                settings.database_type == 'postgres'
                or settings.database_type == 'sqlite'
            )
        ]
    ):
        error_message = ('–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:'
                         ' –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
        logger.critical(error_message, exc_info=True)
        sys.exit(error_message)


async def get_question(question_type: str) -> tuple | None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ë–î."""
    query = """SELECT question,
                      answer,
                      pass_criteria,
                      comments,
                      authors,
                      sources
                FROM question
                WHERE NOT is_condemned AND question_type = $1
                ORDER BY random()
                LIMIT 1"""
    try:
        if settings.database_type == 'postgres':
            conn = await asyncpg.connect(
                f'postgresql://{settings.postgres_user}'
                f':{settings.postgres_password.get_secret_value()}'
                f'@{settings.postgres_db_host}'
                f':{settings.postgres_db_port}'
                f'/{settings.postgres_db}'
            )
            question = await conn.fetchrow(query, question_type)
            await conn.close()
        elif settings.database_type == 'sqlite':
            async with aiosqlite.connect(settings.sqlite_db_path) as conn:
                cursor = await conn.execute(query, question_type)
                question = await cursor.fetchone()
    except Exception as error:
        logger.error(error, exc_info=True)
        return None
    if not question:
        logger.error(
            '–ò–∑ –±–¥ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–π –∫–∞–∫ None',
            exc_info=True
        )
        return None
    return question


async def get_parsed_question(question_type: str) -> None | dict:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å."""
    question = await get_question(question_type)
    if (
        not question
        or (
            not question[0]
            or question[0] == 'None'
            or not question[1]
            or question[1] == 'None'
        )
    ):
        return None
    parsed_question = {'–í–æ–ø—Ä–æ—Å': question[0], '–û—Ç–≤–µ—Ç': question[1]}
    if question[2] and question[2] != 'None':
        parsed_question['–ó–∞—á—ë—Ç'] = question[2]
    if question[3] and question[3] != 'None':
        parsed_question['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] = question[3]
    if question[4] and question[4] != 'None':
        parsed_question['–ê–≤—Ç–æ—Ä—ã'] = question[4]
    if question[5] and question[5] != 'None':
        parsed_question['–ò—Å—Ç–æ—á–Ω–∏–∫–∏'] = question[5]
    return parsed_question


def generate_answer(parsed_question: dict) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
    answer_dict = parsed_question.copy()
    del answer_dict['–í–æ–ø—Ä–æ—Å']
    answer_text = f'<b>{answer_dict['–û—Ç–≤–µ—Ç']}</b>\n\n'
    del answer_dict['–û—Ç–≤–µ—Ç']
    answer_text += '\n'.join(f'<b><i>{key}:</i></b> <i>{item}</i>'
                             for key, item in answer_dict.items())
    return answer_text


def get_inline_keyboard(
        buttons: list[list[types.InlineKeyboardButton]] | None = None
) -> types.InlineKeyboardMarkup:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç inline-–∫–Ω–æ–ø–∫–∏."""
    if buttons is None:
        buttons = [
            [types.InlineKeyboardButton(
                text='ü¶â –ß—Ç–æ-–ì–¥–µ-–ö–æ–≥–¥–∞ ', callback_data='www'
            )],
            [types.InlineKeyboardButton(
                text='üß† –ë—Ä–µ–π–Ω-—Ä–∏–Ω–≥ ', callback_data='brain_ring'
            )],
            [types.InlineKeyboardButton(
                text='üéØ –°–≤–æ—è –∏–≥—Ä–∞ ', callback_data='jeopardy'
            )],
        ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)
